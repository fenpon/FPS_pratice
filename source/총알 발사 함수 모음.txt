void Aplayer_char::attack_timer_thread()//총알 생성 함수 타이머용 입니다.
{
	
	FTransform Muzzle_tran = FPSMesh->GetSocketTransform(TEXT("Muzzle_01"));//총구위치의 소켓의 transform을 얻습니다.
	Abullet_shot* bullet_shot_target = GetWorld()->SpawnActor<Abullet_shot>(bullet_inst, Muzzle_tran.GetLocation(), Muzzle_tran.GetRotation().Rotator());//총구의 위치와 회전각을 기준으로 총알을 생성합니다.
	if (bullet_shot_target != nullptr)
	{
		shot_particle->SetTemplate(particle_ref);//발사 이펙트 실행.

		bullet_shot_target->shot();//발사 했다는걸 총알 액터에 알려줍니다.
	}
	else
	{
		UE_LOG(LogTemp, Log, TEXT("shooting_error"));//스폰실패.
		
	}
}


void Aplayer_char::attack_timer_fin_thread()//총알 발사가 끝났다를 알리는 함수입니다.
{
	UE_LOG(LogTemp, Log, TEXT("shooting_fin"));
	attack_locker = false;//발사가 완료 됬기 때문에 락커를 풀어줍니다.
}


void Aplayer_char::attack_shot(float axis_normalize)//마우스 좌클릭 인풋 이벤트 
{
	if (axis_normalize != 0)
	{
		if (attack_locker == false)//0.4초(5발이 발사가 되는 시간)이 될때까지 락커를 걸어놓습니다.
		{
			attack_locker = true;//락커를 걸어놓습니다.
			FTransform Muzzle_tran = FPSMesh->GetSocketTransform(TEXT("Muzzle_01"));//총구의 transform를 얻습니다.
			Abullet_shot* bullet_shot_target = GetWorld()->SpawnActor<Abullet_shot>(bullet_inst, Muzzle_tran.GetLocation(), Muzzle_tran.GetRotation().Rotator());//총구의 위치와 회전각을 기준으로 총알을 생성합니다.
			if (bullet_shot_target != nullptr)
			{
				shot_particle->SetTemplate(particle_ref);//발사 이펙트 실행.
				sound->SetSound(sound_ref);//발사 소리 파일을 설정합니다.
				sound->Play();//발사 소리 실행
				bullet_shot_target->shot();//발사 했다는걸 총알 액터에 알려줍니다.

				GetWorldTimerManager().SetTimer(attack_timer[0], this, &Aplayer_char::attack_timer_thread, 0.1f, false);//0.1초뒤 총알 발사
				GetWorldTimerManager().SetTimer(attack_timer[1], this, &Aplayer_char::attack_timer_thread, 0.2f, false);//0.2초뒤 총알 발사
				GetWorldTimerManager().SetTimer(attack_timer[2], this, &Aplayer_char::attack_timer_thread, 0.3f, false);//0.3초뒤 총알 발사
				GetWorldTimerManager().SetTimer(attack_timer[3], this, &Aplayer_char::attack_timer_thread, 0.4f, false);//0.4초뒤 총알 발사
				GetWorldTimerManager().SetTimer(attack_fin_timer, this, &Aplayer_char::attack_timer_fin_thread, 0.4f, false);//0.4초뒤 다음 발사 허용

			}
			else
			{
				UE_LOG(LogTemp, Log, TEXT("shooting_error"));
				attack_timer_fin_thread();//다음 발사 허용
			}
		}
	} 
}