void Abullet_shot::shot()//발사를 알리는 함수
{
	
	float speed_sample_vec = 4000;//초기 속도
	FVector dir_vec = this->GetActorRotation().Vector();//방향벡터

	velocity = speed_sample_vec*dir_vec;//초기 속도와 방향의 곱입니다.
	if (GetWorldTimerManager().IsTimerActive(life_timer))
	{
		//타이머가 활성화 중이라면
	}
	else
	{
		GetWorldTimerManager().SetTimer(life_timer, this, &Abullet_shot::bullet_shot_life, 10.0f, false);//10초후 자동으로 총알이 소멸합니다. (수명)
	}
	is_tick_run = true;//tick 연산 처리를 허용하는 변수입니다.
	
}





void Abullet_shot::Tick(float DeltaTime)
{
	
	
	
		if (is_tick_run == true)
		{
			
	
			FVector2D horizon_vec = FVector2D(velocity.X, velocity.Y);//수평 속도 벡터
		
		
		
			float new_velocity_z = velocity.Z + (gravity*DeltaTime); //중력가속도가 적용된 z축입니다. (등속도운동) v = v0 + at;
			
			FVector new_velocity = FVector(velocity.X,velocity.Y, new_velocity_z);//변환된 수직,수평 속도들을 3차원으로 만듭니다. //수평방향은 가속이 없습니다.
		
			velocity = new_velocity;//다음 틱을 위해 변환된 속도변위를 저장합니다. //다음 틱에선 이값은 이전 속도 변위로 인식합니다.
			FVector space = new_velocity*DeltaTime; //이동변위 = 속도변위*시간변위

			/*raycast 설정 값입니다.*/
			FCollisionQueryParams TraceParams(FName(TEXT("bullet Trace")), true, this);
			TraceParams.bTraceComplex = true;
			TraceParams.bReturnPhysicalMaterial = false;
			ECollisionChannel CollisionChannel = ECC_Pawn;
			TraceParams.AddIgnoredActor(this);

			//Re-initialize hit info
			FHitResult Hit = FHitResult(ForceInit);
			if (GetWorld() != nullptr)
			{
				//디버그 테스트 용 입니다! 레이케스트의 인식범위를 확인할수있습니다.
				DrawDebugLine(
					GetWorld(),
					GetActorLocation(), GetActorLocation() + space,
					FColor(0, 255, 255),
					false, -1, 0,
					12.333
				);
				
				//싱글 레이케스트 입니다. pawn 만 체크하며 오버랩하면 player_char의 overlap함수를 작동 시킵니다. 
				if (GetWorld()->LineTraceSingleByChannel(Hit, GetActorLocation(), GetActorLocation() + space, CollisionChannel, TraceParams) == true)
				{
					UCapsuleComponent* obj = Cast<UCapsuleComponent>(Hit.GetComponent());
					if (obj != NULL)
					{
						obj->OnComponentBeginOverlap.Broadcast(NULL, this, root, 1, true, Hit);//수동으로 플레이어에게 오버랩이벤트를 발생하게합니다// 총알 인식률을 늘리기위해 레이케스트로 오버랩받습니다.
						UE_LOG(LogTemp, Log, TEXT("trace : %s"),*obj->GetName());
					}
					
				}
				

			}

			SetActorLocation(GetActorLocation() + space);//액터의 위치를 바꿉니다.
			

		}
	
	
	
	Super::Tick(DeltaTime);

}
